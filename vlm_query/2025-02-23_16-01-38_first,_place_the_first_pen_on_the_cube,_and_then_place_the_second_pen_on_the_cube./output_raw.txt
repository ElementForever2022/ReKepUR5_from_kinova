```python
# The task involves placing two pens (keypoints 2 and 3) sequentially on the cube (keypoint 0).
# This task can be broken down into 4 stages:
# 1. Grasp the first pen (keypoint 2).
# 2. Place the first pen on the cube (keypoint 0).
# 3. Grasp the second pen (keypoint 3).
# 4. Place the second pen on the cube (keypoint 0).

num_stages = 4

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the first pen (keypoint 2)."""
    cost = np.linalg.norm(end_effector - keypoints[2])
    return cost

### stage 1 path constraints
# No path constraints for grasping.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The first pen (keypoint 2) is 5cm above the cube (keypoint 0)."""
    offsetted_point = keypoints[0] + np.array([0, 0, 0.05])  # 5cm above the cube
    cost = np.linalg.norm(keypoints[2] - offsetted_point)
    return cost

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the first pen (keypoint 2)."""
    cost = np.linalg.norm(end_effector - keypoints[2])
    return cost

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the second pen (keypoint 3)."""
    cost = np.linalg.norm(end_effector - keypoints[3])
    return cost

### stage 3 path constraints
# No path constraints for grasping.

### stage 4 sub-goal constraints
def stage4_subgoal_constraint1(end_effector, keypoints):
    """The second pen (keypoint 3) is 5cm above the cube (keypoint 0)."""
    offsetted_point = keypoints[0] + np.array([0, 0, 0.05])  # 5cm above the cube
    cost = np.linalg.norm(keypoints[3] - offsetted_point)
    return cost

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the second pen (keypoint 3)."""
    cost = np.linalg.norm(end_effector - keypoints[3])
    return cost

"""
Summarize keypoints to be grasped in all grasping stages.
The length of the list should be equal to the number of stages.
For grasping stage, write the keypoint index. For non-grasping stage, write -1.
"""
grasp_keypoints = [2, -1, 3, -1]

"""
Summarize at **the end of which stage** the robot should release the keypoints.
The keypoint indices must appear in an earlier stage as defined in `grasp_keypoints` (i.e., a keypoint can only be released only if it has been grasped previously).
Only release object when it's necessary to complete the task, e.g., drop bouquet in the vase.
The length of the list should be equal to the number of stages.
If a keypoint is to be released at the end of a stage, write the keypoint index at the corresponding location. Otherwise, write -1.
"""
release_keypoints = [-1, 2, -1, 3]
```