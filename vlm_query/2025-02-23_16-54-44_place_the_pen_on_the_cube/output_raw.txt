```python
# The task "place the pen on the cube" involves 3 stages:
# 1. Grasp the pen.
# 2. Align the pen above the cube.
# 3. Place the pen on the cube and release it.

num_stages = 3

### stage 1 sub-goal constraints (grasp the pen)
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the pen (keypoint 2)."""
    pen_keypoint = keypoints[2]
    cost = np.linalg.norm(end_effector - pen_keypoint)
    return cost

### stage 1 path constraints (none for grasping stage)
# No path constraints needed for this stage.

### stage 2 sub-goal constraints (align the pen above the cube)
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The pen (keypoint 2) is aligned 10cm above the cube (keypoint 1)."""
    cube_keypoint = keypoints[1]
    offsetted_point = cube_keypoint + np.array([0, 0, 0.1])  # 10cm above the cube
    pen_keypoint = keypoints[2]
    cost = np.linalg.norm(pen_keypoint - offsetted_point)
    return cost

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the pen (keypoint 2)."""
    pen_keypoint = keypoints[2]
    cost = np.linalg.norm(end_effector - pen_keypoint)
    return cost

### stage 3 sub-goal constraints (place the pen on the cube and release it)
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The pen (keypoint 2) is placed on the cube (keypoint 1)."""
    cube_keypoint = keypoints[1]
    pen_keypoint = keypoints[2]
    cost = np.linalg.norm(pen_keypoint - cube_keypoint)
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the pen (keypoint 2)."""
    pen_keypoint = keypoints[2]
    cost = np.linalg.norm(end_effector - pen_keypoint)
    return cost

"""
Summarize keypoints to be grasped in all grasping stages.
The length of the list should be equal to the number of stages.
For grasping stage, write the keypoint index. For non-grasping stage, write -1.
"""
grasp_keypoints = [2, -1, -1]

"""
Summarize at **the end of which stage** the robot should release the keypoints.
The keypoint indices must appear in an earlier stage as defined in `grasp_keypoints` (i.e., a keypoint can only be released only if it has been grasped previously).
Only release object when it's necessary to complete the task, e.g., drop bouquet in the vase.
The length of the list should be equal to the number of stages.
If a keypoint is to be released at the end of a stage, write the keypoint index at the corresponding location. Otherwise, write -1.
"""
release_keypoints = [-1, -1, 2]
```